}
GetFirst = function(x){
return(x$first)
}
GetFirst.flam(bubba)
GetFirst = function(x){
return(x$first)
}
GetFirst.flam(bubba)
GetFirst.flam = function(x){
return(x$first)
}
GetFirst(bubba)
bubba = list(first = "one", second = "two", third = "third")
class(bubba) = append(class(bubba),"flam")
bubba
GetFirst = function(x){
UseMethod("GetFirst",x)
}
GetFirst.flam = function(x){
return(x$first)
}
GetFirst(bubba)
s = list(name = "John", age = 21, GPA = 3.5)
class(s) = "student"
s
s = list(name = "John", age = 21, GPA = 3.5)
class(s) = "student"
s
#Constructors: Good practice to use a function with the same name as class to create objects
student = function(name, age, gpa){
#integrity check
if(g>4 || g<0) stop("GPA must be between 0 and 4")
#assign values
value = list(name = name, age = age, GPA = gpa)
#class can be set using class or attr() function
attr(value, "class") = "student"
#class(value) = "student"
value
}
s = student("Paul", 26, 3.7)
s
tion
print.student = function(obj) {
cat(obj$name, "\n")
cat(obj$age, "years old","\n")
cat("GPA:", obj$GPA,"\n")
}
print(s)
#writing your own new fucntion
grade = function (obj){  # This is a definition of a generic function
UseMethod("grade") #
}
grade.default = function(obj){
cat("Generic Function\n")
}
grade.student = function(obj){
cat("Your grade is ",obj$GPA, "\n")
}
print(s)
grade(s)
install.packages("data.tree")
library(data.tree)
install.packages("data.tree")
library(data.tree)
install.packages("XML")
node = list(val, nextone = NULL)
node = list(val=0, nextone = NULL)
class(node) = "linklist"
linklist = function(inpval, nextelement){
llist = list(val = inpval, nextone = nextelement)
class(llist) = "linklist"
llist
}
node1 = linklist(5,NULL)
node2 = linklist(10,NULL)
node2$nextone = node1
print.linklist = function(obj){
while(!is.null(obj$nextone)){
cat(obj$val,"\n")
obj = obj$nextone
}
}
print(node2)
node3 = linklist(15, NULL)
node4 = linklist(20, NULL)
print(node4)
node2$nextone = node1
node3$nextone = node2
node4$nextone = node3
print(node4)
length.linklist = function(obj){
len = 0
while(!is.null(obj$nextone)){
len = len+1
}
return(len)
}
length(node4)
length.linklist = function(obj){
len = 0
while(!is.null(obj$nextone)){
len = len+1
obj = obj$nextone
}
return(len)
}
length(node4)
head = linklist(NULL, NULL)
node = list(val=0, nextone = NULL)
class(node) = "linklist"
linklist = function(inpval, nextelement){
llist = list(val = inpval, nextone = nextelement)
class(llist) = "linklist"
llist
}
node1 = linklist(5,NULL)
node2 = linklist(10,NULL)
node3 = linklist(15, NULL)
node4 = linklist(20, NULL)
head = linklist(NULL, NULL)
node2$nextone = node1
node3$nextone = node2
node4$nextone = node3
head$nextone = node4
print.linklist = function(obj){
while(!is.null(obj$nextone)){
cat(obj$val,"\n")
obj = obj$nextone
}
}
print(head)
length.linklist = function(obj){
len = 0
while(!is.null(obj$nextone)){
len = len+1
obj = obj$nextone
}
return(len)
}
length(head)
insert.linklist = function(llist,obj,posn){
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj$nextone
}
}
node25 = llinklist(199,NULL)
node25 = linklist(199,NULL)
insert.linklist = function(llist,obj,posn){
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj$nextone
}
return(llist)
}
insert.linklist(head,node25,2)
print(head)
print.linklist = function(obj){
while(!is.null(obj$nextone)){
cat(obj$val,"\n")
obj = obj$nextone
}
cat(obj$val,"\n")
}
print(head)
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj$nextone
}
return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
print(obj$val)
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj$nextone
}
return(head)
}
node25 = linklist(199,NULL)
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
print(obj$nextone)
llist$nextone = obj$nextone
print(obj$nextone)
}
return(head)
}
node25 = linklist(199,NULL)
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
print(llist$nextone)
}
return(head)
}
node25 = linklist(199,NULL)
insert.linklist(head,node25,2)
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
print(obj$nextone)
llist$nextone = obj
print(obj$nextone)
}
return(head)
}
node25 = linklist(199,NULL)
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
print(obj$nextone)
llist$nextone = obj
print(obj$nextone)
}
return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
}
return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
print(obj)
}
return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
print(obj)
print(head)
}
#return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
print(obj)
print(head$val)
}
#return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head = llist
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
print(obj)
}
print(head)
#return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head$nextone = llist$nextone
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
print(obj)
}
print(head)
#return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head$nextone = llist$nextone
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
print(obj)
}
print(head)
print(llist)
#return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
print(llist$val)
head = linklist(NULL, NULL)
head$nextone = llist$nextone
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
print(obj)
}
print(head)
print(llist)
#return(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head$nextone = llist$nextone
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
}
print(head)
}
insert.linklist(head,node25,2)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head$nextone = llist$nextone
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
}
return(head)
}
node25 = linklist(199,NULL)
a = insert.linklist(head,node25,2)
print(a)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head$nextone = llist$nextone
if(length(llist)<posn){ return(-1)}
else{
for(i in (1:posn)){
llist = llist$nextone
}
obj$nextone = llist$nextone
llist$nextone = obj
}
return(llist)
}
node25 = linklist(199,NULL)
a = insert.linklist(head,node25,2)
print(a)
insert.linklist = function(llist,obj,posn){
head = linklist(NULL, NULL)
head$nextone = llist$nextone
if(length(head)<posn){ return(-1)}
else{
for(i in (1:posn)){
head = head$nextone
}
obj$nextone = head$nextone
head$nextone = obj
}
return(llist)
}
node25 = linklist(199,NULL)
a = insert.linklist(head,node25,2)
print(a)
a = 25
b = a
a = 35
a
b
setClass("student", slots = list(name = "character", age = "numeric", GPA = "numeric"))
s = new("student", name = "John", age = 21, GPA = 3.5)
s
student = setClass("student", slots = list(name = "character", age = "numeric", GPA = "numeric"))
student
newStudent = student(name = "Kim", age = 22, GPA = 3.7)
newStudent
newStudent$name
newStudent@name
newStudent@GPA = 3.75
newStudent
slot(newStudent, "name")
slot(newStudent, "name") = "Kimberly"
newStudent
setMethod("show","student",
function(object){
cat(object@name, "\n")
cat(object@age, "\n")
cat("GPA:", object@GPA,"\n")
}
)
newStudent
setRefClass("Student")
setRefClass("student", fields = list(name = "character",age = "numeric", GPA = "numeric"))
setRefClass("student", fields = list(name = "character",age = "numeric", GPA = "numeric"))
student = setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s = student(name = "Jade", age = 19, GPA = 3.9)
s
student = setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s = student(name = "Jade", age = 19, GPA = 3.9)
student = setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s = student(name = "Jade", age = 19, GPA = 3.9)
student
s2 = student(name = "Jade", age = 19, GPA = 3.9)
student <- setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s <- student(name = "John", age = 21, GPA = 3.5)
student2 <- setRefClass("student2", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s <- student2(name = "John", age = 21, GPA = 3.5)
student2 <- setRefClass("student2", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s <- student2(name = "John", age = 21, GPA = 3.5)
student = setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s2 = student(name = "Jade", age = 19, GPA = 3.9)
student2 = setRefClass("student2", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s2 = student2(name = "Jade", age = 19, GPA = 3.9)
s2
student = setRefClass("student", fields = list(name = "character", age = "numeric", GPA = "numeric"))
s = student(name = "Jade", age = 19, GPA = 3.9)
