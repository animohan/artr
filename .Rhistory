pred[i] = 1
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
k =  3
pred = rep(NA, n-k)
sum = x[1:(k-1)]
if(sum > k/2){
pred[1] = 1}
else {pred[1] = 0}
return(pred)
}
rain1 = function(x,k){
n = length(x)
k =  3
pred = rep(NA, n-k)
sum = x[1:(k-1)]
if(sum > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum = sum - a[i-1] + a[i-k+1]
if(sum > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
k = 5
k/2
o
length(o)
rain1 = function(x,k){
n = length(x)
k =  3
pred = rep(NA, n-k)
sum = x[1:k]
if(sum > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum = sum - a[i-1] + a[i+k+1]
if(sum > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
k =  3
pred = rep(NA, n-k)
sum = sum(x[1:k])
if(sum > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum = sum - a[i-1] + a[i+k+1]
if(sum > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
u = [1,2,3,4,5]
u = c(1,2,3,4,5)
sum(u[1:3])
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum = sum(x[1:k])
if(sum > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum = sum - a[i-1] + a[i+k+1]
if(sum > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum1 = sum1 - a[i-1] + a[i+k+1]
if(sum1 > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
print(k)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum1 = sum1 - a[i-1] + a[i+k+1]
if(sum1 > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
print(k)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum1 = sum1 - a[i-1] + a[i+k+1]
print(sum1)
print(k)
if(sum1 > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
print(k)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum1 = sum1 - x[i-1] + x[i+k+1]
print(sum1)
print(k)
if(sum1 > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
print(k)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k-1)){
sum1 = sum1 - x[i-1] + x[i+k+1]
print(sum1)
print(k)
if(sum1 > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
print(k)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum1 = sum1 - x[i-1] + x[i+k]
print(sum1)
print(k)
if(sum1 > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum1 = sum1 - x[i-1] + x[i+k]
print(sum1)
print(k)
if(sum1 > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum1 = sum1 - x[i-1] + x[i+k]
print(sum1)
if(sum1 > k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k)){
sum1 = sum1 - x[i-1] + x[i+k]
print(sum1)
if(sum1 >= k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
rain1 = function(x,k){
n = length(x)
pred = rep(NA, n-k)
sum1 = sum(x[1:k])
print(sum1)
if(sum1 > k/2){
pred[1] = 1}
else {pred[1] = 0}
for(i in 2:(n-k+1)){
sum1 = sum1 - x[i-1] + x[i+k-1]
print(sum1)
if(sum1 >= k/2){
pred[i] = 1}
else{pred[i] = 0}
}
return(pred)
}
o = c(1,1,1,0,0,0,1,1,1)
rain1(o,3)
a  = c(1,2,3,4,5)
a[-1]
a[length(a):1]
a = c(1,2)
b = c(99,88)
c = rbind(a,b)
c
c = rbind(a,b) + c(1,2,3,4)
c
c
d = rbind(c(1,1), c(1,1))
d
c+d
c = rbind(c(1,1),c(1,1))
d = c(1,5)
c
d
c+d
a = c(1,1,1)
b = c(2,2)
a+b
a = c(1,1,1,1)
b = c(2,2)
a+b
b+a
x = c(1,2,3,99,88)
x[x>25] = -1
x
x = c(1,2,3,99,88)
subset(x, x>99,-1)
?subset
subset(x, x>99,x = -1)
subset(x, x>99)
subset(x, x>25)
x[subset(x, x>25)] = -1
x
x
x = c(1,2,3,99,88)
x[which(x>25)]
which(x>25)
x = c(1,2,3,99,88)
x[which(x)%%2 == 0]
which(x)%%2 == 0
which(x)
seq(1:50,length = 10)
seq(1:50)
seq(1:50,2)
seq(1,50,2)
seq(1,50, length = 10)
seq(1,50)
seq(1:50)
rep(c(1,2),30)
rep(c(1,2),each =2)
a = (1,2,3,4,5)
a = c(1,2,3,4,5)
apply(a,sqr)
apply(1:8,sqr)
apply(1:8,sqrt)
sapply(1:8,sqrt)
sapply(a,sqrt)
x = c(1,2,3,4,5,NULL)
mean(x)
x = c(1,2,3,4,5,NA)
mean(x)
x  = 1:10
x[x%%2 == 0]
ifelse(x%%2 == 0,x)
ifelse(x%%2 == 0,print(x), print())
ifelse(x%%2 == 0,print(x), print(""))
ifelse(x%%2 == 0,print(x),
)
ifelse(x%%2 == 0,print(x),NA)
ifelse(x%%2 == 0,-1, 1)
setwd("~/projects/r_projects/artr")
g = c("M","F","F","I","M","M","F")
ifelse(g == "M",1,ifelse(g == "F"),2,3)
ifelse(g == "M",1,ifelse(g == "F",2,3))
m = which(g == "M")
m
grps = list()
for (gen in c("M","F","I")) grps[gen] = which(g == gen)
for (gen in c("M","F","I")) grps[[gen]] = which(g == gen)
grps
ifelse(g == "F",2,3)
aba = read.csv("abalone.data", header = T, as.is = T)
head(aba)
names(aba)
colnames(aba) = c("Gender","Length", "Diameter","Height","WholeWt", "ShuckedWt","ViscWt","ShellWt","Rings")
grps = list()
for(gen in c("M","F")) grps[[gen]] = which(aba$Gender == gen)
for(gen in c("M","F")) grps[[gen]] = which(aba$Gender == gen)
abam = aba[grps$M,]
abaf = aba[grps$F,]
par(mfrow = c(1,1))
plot(abam$Length, abam$Diameter, col = "red")
plot(abaf$Length, abaf$Diameter, pch = "x", new = FALSE, col = "green")
pchvec = ifelse(aba$Gender == "M", "o","x")
plot(aba$Length, aba$Diameter, pch = pchvec)
pchvec
x = c(1:3)
y = c(1,3,4)
x == y #gives element wise equality
all(x==y) # gives if all elements of vectors are equal hence the vectors are equal
identical(x,y) #gives if vectors are equal
x = 1:2
y = c(1,2)
all(x==y)
identical(x,y)
typeof(x)
typeof(y)
u = c(5,2,3)
typeof(u)
u = c(5,2,"abc")
typeof(u)
u = c(5,3, list(a = 1, b= 4))
typeof(u)
u = c(1:5, c(2:7))
u
y= matrix(c(1,2,3,4), nrow = 2)
y
y[,]
y[,1]
y[,2]
y[1,]
y[2,]
library(pixmap)
mtrush1 = read.pnm("mtrush1.pgm") #reading the image file
install.packages("pixmap")
library(pixmap)
mtrush1 = read.pnm("mtrush1.pgm") #reading the image file
mtrush1
plot(mtrush2)
mtrush2 = mtrush1
mtrush2@grey[84:163, 135:177] = 1
plot(mtrush2)
rows = 84:163
cols = 135:177
rows
cols
newimg = img
newimg = mtrush1
newimg[rows,cols]
plot(newimg[rows,cols])
newimg = img@grey[rows,cols]+100
newimg = mtrush1@grey[rows,cols]+100
plot(newimg)
newimg
plot(newimg@grey)
newimg = mtrush1
plot(mtrush1)
plot(newimg)
noise = matrix(nrow = nrows, ncol = ncols, runif(nrows*ncols))
rows
noise = matrix(nrow = length(rows), ncol = length(cols), runif(length(rows)*length(cols)))
noise
dim(noise)
newimg = mtrush1@grey + noise
newimg[rows, cols] = mtrush1@grey[rows,cols] + noise
newimg@grey = mtrush1@grey[rows,cols] + noise
plot(newimg)
newimg@grey = mtrush1@grey[rows,cols] + noise/max(noise)
plot(newimg)
newimg@grey = 0.5*mtrush1@grey[rows,cols] + 0.5*noise
plot(newimg)
newimg@grey = 0.5*mtrush1@grey + 0.5*noise
mtrush3 = blurpart(mtrush1, 84:163, 135:177, 0.65)
plot(mtrush3)
mtrush3 = blurimage(mtrush1, 84:163, 135:177, 0.4)
plot(mtrush3)
mtrush1@grey[28,88] #One pixel value
mtrush1 = read.pnm("mtrush1.pgm") #reading the image file
mtrush1
mtrush3 = blurimage(mtrush1, 84:163, 135:177, 0.4)
blurpart = function(img, rows, cols, q){
lrows = length(rows)
lcols = length(cols)
newimg = img
randomnoise = matrix(nrow = lrows, ncol = lcols, runif(lrows*lcols))
newimg@grey[rows,cols] = (1-q)*img@grey[rows, cols] + q*randomnoise
return(newimg)
}
mtrush3 = blurpart(mtrush1, 84:163, 135:177, 0.65)
plot(mtrush3)
newimg@grey[rows,cols] = 0.5*mtrush1@grey[rows,cols] + 0.5*noise
rows
cols
newimg@grey[rows,cols] = 0.5*mtrush1@grey[rows,cols]
mtrush1@grey[rows,cols]
newimg@grey[rows,cols] = mtrush1@grey[rows,cols]
str(newimg)
str(mtrush1)
dim() mtrush1@grey[rows,cols])
dim(mtrush1@grey[rows,cols])
mtrush1@grey[rows,cols]
0.5*mtrush1@grey[rows,cols]
0.5*mtrush1@grey[rows,cols]+ noise
0.5*mtrush1@grey[rows,cols]+ 0.5*noise
plot(0.5*mtrush1@grey[rows,cols]+ 0.5*noise)
newimg[rows,cols] = 0.5*mtrush1@grey[rows,cols]+ 0.5*noise
newimg = 0.5*mtrush1@grey[rows,cols]+ 0.5*noise
plot(newimg)
dim(newimg)
newimg = 0.5*mtrush1@grey+ 0.5*noise
lrows = length(rows)
lcols = length(cols)
newimg = img
img = mtrush1
newimg = img
randomnoise = matrix(nrow = lrows, ncol = lcols, runif(lrows*lcols))
newimg@grey[rows,cols] = (1-q)*img@grey[rows, cols] + q*randomnoise
q = 0.5
newimg@grey[rows,cols] = (1-q)*img@grey[rows, cols] + q*randomnoise
newimg@grey = 0.5*mtrush1@grey+ 0.5*noise
0.5*mtrush1@grey[rows,cols]+ 0.5*noise
newimg@grey[rows,cols] = 0.5*img@grey[rows, cols] + 0.5*randomnoise
plot(newimg)
newimg@grey = 0.5*img@grey+ 0.5*randomnoise
list(1,2,3,4)
